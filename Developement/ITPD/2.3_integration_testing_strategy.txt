For the integration testing strategy we choosed something in between a bottom-up approach and a functional groupings one. 
This has more than one reason, in the Top down approach we would have had the advantage of being able to output part of the project before finishing the testing of everything, something like a beta of our application that wouldn't have had all the functionalities. This however was not our objective, as given that the overall application is not too complex, the time spent for testing is not enough to justify a beta. 
Therefore the bottom-up/functional groupings approach, that gives us other advantages: first and most important is the parallel testing of the lower modules, that therefore can lower the overall testing time. Also, the functional groupings strategy (with this we mean that we will divide the project in functional subsystems and then test them bottom-up) will allow us to test deeply the modules alone before putting them together, assuring us the correct behaviour of each one, thing that would be harder to do in a top down/non functional approach. 

